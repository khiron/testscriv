name: Apply 'documentation-needed' Label to Pull Request

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  apply_label:
    runs-on: ubuntu-latest
    steps:
      # Set up Python 3.8 and install PyGithub
      - name: Set up Python and Install Dependencies
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install PyGithub
        run: pip install PyGithub

      # Apply the 'documentation-needed' label to the pull request(s) if the corresponding issue has the same label
      - name: Apply 'documentation-needed' Label to Pull Request(s)
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.workflow-apply-label }}
        run: |
          python - <<EOF
          import os
          import json
          from github import Github
          import requests

          print("A label has changed on an issue - check if the issue needs-documentation")
          print(os.environ["PERSONAL_ACCESS_TOKEN"])

          # Create a PyGithub object using the personal access token
          g = Github(os.environ["PERSONAL_ACCESS_TOKEN"])

          # Get the repository object for the current repository
          repo = g.get_repo(os.environ["GITHUB_REPOSITORY"])

          print("test get repo issue")
          issue = repo.get_issue(1)
          print(issue)

          print("test get pulls")
          pull_requests = issue.get_pulls()
          print(pull_requests)


          # Load the event payload from the GITHUB_EVENT_PATH environment variable
          event_path = os.environ["GITHUB_EVENT_PATH"]
          event = {}
          if os.path.exists(event_path):
              with open(event_path, "r") as f:
                  event = json.load(f)

          # Check if the event corresponds to an issue
          if "issue" in event:

              # Get the issue object for the current issue
              try:
                  issue = repo.get_issue(event["issue"]["number"])
              except Exception as e:
                  print(f"Error retrieving issue #{event['issue']['number']}: {e}")
                  response = requests.get(event['issue']['url'], headers={'Authorization': f'Bearer {os.environ["PERSONAL_ACCESS_TOKEN"]}'})
                  if response.ok:
                      print(f"Retrieved issue #{event['issue']['number']} using API directly")
                      issue = response.json()
                      issue = g.get_issue(issue["number"])
                  else:
                      print(f"Error retrieving issue #{event['issue']['number']} using API directly: {response.status_code} {response.reason}")
                      issue = None

              if issue:
                  # Check if the issue has the 'documentation-needed' label
                  if "documentation-needed" in [label.name for label in issue.labels]:

                      # Get the pull requests associated with the issue
                      pull_requests = issue.get_pulls()

                      # Apply the 'documentation-needed' label to each pull request
                      for pull in pull_requests:
                          pull.add_to_labels("documentation-needed")
                          print(f"Applied 'documentation-needed' label to pull request #{pull.number}")
                  else:
                      print(f"Issue #{issue.number} does not have 'documentation-needed' label")
              else:
                  print(f"Unable to retrieve issue #{event['issue']['number']}")
          else:
              print("Event does not correspond to an issue")
          EOF
